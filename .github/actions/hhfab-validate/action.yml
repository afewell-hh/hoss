name: hhfab validate
description: Run hhfab validation via a pinned container or local toolchain.
author: HOSS Automation
inputs:
  script:
    description: Relative path to the validation script to execute.
    required: false
    default: scripts/hhfab-smoke.sh
  working-directory:
    description: Working directory to mount/execute.
    required: false
    default: .
  use-container:
    description: Set to true to run the script inside the pinned hhfab container.
    required: false
    default: 'false'
  container-image:
    description: Fully qualified hhfab container reference.
    required: false
    default: ghcr.io/your-org/hhfab@sha256:1111111111111111111111111111111111111111111111111111111111111111
  no-network:
    description: Disable container network access when true
    required: false
    default: 'false'
  timeout-seconds:
    description: Hard timeout for the validation run (prevents hung jobs)
    required: false
    default: '900'
  container-user:
    description: UID:GID for docker run to avoid root-owned files (auto uses host id)
    required: false
    default: 'auto'
  strict:
    description: Treat warnings as errors (propagate nonzero on warning)
    required: false
    default: 'false'
outputs:
  status:
    description: "ok|fail|warn|timeout|digest_mismatch"
    value: ${{ steps.hhfab.outputs.status }}
  durationMs:
    description: "Execution time (ms)"
    value: ${{ steps.hhfab.outputs.durationMs }}
  hhfabVersion:
    description: "hhfab version reported during execution"
    value: ${{ steps.hhfab.outputs.hhfabVersion }}
  containerImage:
    description: "Container image reference used (local when empty)"
    value: ${{ steps.hhfab.outputs.containerImage }}
  imageDigest:
    description: "Fully qualified image digest used for containerized runs"
    value: ${{ steps.hhfab.outputs.imageDigest }}
  warningsCount:
    description: "Number of warning diagnostics observed during strict evaluation"
    value: ${{ steps.hhfab.outputs.warningsCount }}
  strict:
    description: "Whether strict mode was requested for this run"
    value: ${{ steps.hhfab.outputs.strict }}
runs:
  using: composite
  steps:
    - id: hhfab
      name: Run hhfab validation
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        _TIMEOUT: ${{ inputs.timeout-seconds }}
        _STRICT: ${{ inputs.strict }}
        _CONTAINER_USER: ${{ inputs.container-user }}
      run: |
        set -Eeuo pipefail

        start_ns=$(date +%s%N)
        script="${{ inputs.script }}"

        root="$(realpath -m "${GITHUB_WORKSPACE}")"
        wd="$(realpath -m ".")"
        if [[ "${wd}" != "${root}"* ]]; then
          echo "Working directory escapes GITHUB_WORKSPACE" >&2
          exit 2
        fi

        script_path="$(realpath -m "${script}")"
        if [[ "${script_path}" != "${root}"* ]]; then
          echo "Script path escapes GITHUB_WORKSPACE" >&2
          exit 2
        fi
        if script_rel=$(realpath --relative-to="${wd}" "${script_path}" 2>/dev/null); then
          script_rel="./${script_rel}"
        else
          script_rel="/workspace${script_path#${root}}"
        fi

        if [[ ! -x "${script_path}" ]]; then
          chmod +x "${script_path}"
        fi

        status="ok"
        exit_code=0
        hhfab_version="unknown"
        container_image_used="local"
        image_digest=""
        warnings_count=0
        status_reason=""

        sanitize_logs() {
          sed -E 's/(ghp_[A-Za-z0-9]{36})/[REDACTED]/g; s/([A-Za-z0-9_-]{20,}\.[A-Za-z0-9_-]{20,}\.[A-Za-z0-9_-]{20,})/[REDACTED]/g'
        }

        artifact_parent="${RUNNER_TEMP:-}"
        if [[ -z "${artifact_parent}" || ! -d "${artifact_parent}" ]]; then
          artifact_parent="$(mktemp -d)"
        fi
        artifact_host_dir="${artifact_parent%/}/hhfab-review-${RANDOM:-0}"
        rm -rf "${artifact_host_dir}"
        mkdir -p "${artifact_host_dir}/logs"

        workspace_artifacts_dir="${root}/review-kit-artifacts"
        rm -rf "${workspace_artifacts_dir}"
        mkdir -p "${workspace_artifacts_dir}"

        TIMEOUT_HAS_PRESERVE=0
        if command -v timeout >/dev/null 2>&1; then
          if timeout --help 2>&1 | grep -q -- '--preserve-status'; then
            TIMEOUT_HAS_PRESERVE=1
          fi
        fi

        run_cmd() {
          if command -v timeout >/dev/null 2>&1; then
            if [[ ${TIMEOUT_HAS_PRESERVE} -eq 1 ]]; then
              timeout --preserve-status -s TERM "${_TIMEOUT}" "$@"
            else
              timeout -s TERM "${_TIMEOUT}" "$@"
            fi
          else
            "$@"
          fi
        }

        if [[ "${{ inputs.use-container }}" == "true" ]]; then
          image="${{ inputs.container-image }}"
          if [[ "${image}" != *"@sha256:"* ]]; then
            echo "hhfab container image must be pinned by digest (include @sha256)" >&2
            exit 1
          fi
          if ! command -v docker >/dev/null 2>&1; then
            echo "docker is required to run the hhfab container" >&2
            exit 1
          fi

          user_args=()
          if [[ "${_CONTAINER_USER}" == "auto" ]]; then
            user_args=(--user "$(id -u):$(id -g)")
          elif [[ -n "${_CONTAINER_USER}" ]]; then
            user_args=(--user "${_CONTAINER_USER}")
          fi

          net_args=()
          if [[ "${{ inputs.no-network }}" == "true" ]]; then
            net_args=(--network=none)
          fi

          container_image_used="${image}"
          if ! docker image inspect "${image}" >/dev/null 2>&1; then
            docker pull "${image}" >/dev/null
          fi
          pulled_digest="$(docker inspect --format='{{index .RepoDigests 0}}' "${image}" 2>/dev/null || true)"
          if [[ -z "${pulled_digest}" ]]; then
            status="digest_mismatch"
            status_reason="Unable to resolve digest for ${image}"
            exit_code=1
          elif [[ "${pulled_digest}" != "${image}" ]]; then
            status="digest_mismatch"
            status_reason="Digest mismatch: expected ${image}, got ${pulled_digest}"
            exit_code=1
          else
            image_digest="${pulled_digest}"
          fi

          if [[ ${exit_code} -eq 0 ]]; then
            docker_base_args=(
              docker
              run
              --rm
              --pull=never
              --read-only
              --tmpfs
              /tmp:rw,noexec,nosuid,size=64m
              --cap-drop=ALL
              --security-opt
              no-new-privileges
              --security-opt
              seccomp=unconfined
              --security-opt
              apparmor=docker-default
              --pids-limit=256
              --memory=512m
              --cpus=1
              -v
              "${wd}:/workspace:ro"
              -v
              "${artifact_host_dir}:/out:rw"
              -w
              /workspace
              --env
              CI=1
              --env
              HHFAB_ARTIFACT_DIR=/out
              --env
              TIMEOUT_SECS="${_TIMEOUT}"
              --env
              HHFAB_SCRIPT="${script_rel}"
            )
            if [[ ${#user_args[@]} -gt 0 ]]; then
              docker_base_args+=("${user_args[@]}")
            fi
            if [[ ${#net_args[@]} -gt 0 ]]; then
              docker_base_args+=("${net_args[@]}")
            fi
            if [[ "${_STRICT}" == "true" ]]; then
              docker_base_args+=(--env HHFAB_STRICT=1)
            fi
            docker_base_args+=("${image}")

            container_command=$(cat <<'EOS'
set -Eeuo pipefail
umask 027
mkdir -p /out/logs
sanitize() {
  sed -E 's/(ghp_[A-Za-z0-9]{36})/[REDACTED]/g; s/([A-Za-z0-9_-]{20,}\.[A-Za-z0-9_-]{20,}\.[A-Za-z0-9_-]{20,})/[REDACTED]/g'
}
if command -v hhfab >/dev/null 2>&1; then
  hhfab version || true
fi
run_target() {
  if command -v timeout >/dev/null 2>&1; then
    if timeout --help 2>&1 | grep -q -- '--preserve-status'; then
      timeout --preserve-status -s TERM "${TIMEOUT_SECS}s" bash "$HHFAB_SCRIPT"
    else
      timeout -s TERM "${TIMEOUT_SECS}s" bash "$HHFAB_SCRIPT"
    fi
  else
    bash "$HHFAB_SCRIPT"
  fi
}
run_target 2>&1 | sanitize | tee /out/logs/hhfab.log
EOS
)

            if ! run_cmd "${docker_base_args[@]}" bash -lc "${container_command}"; then
              exit_code=$?
              status="fail"
            fi
          fi
        else
          umask 027
          export HHFAB_ARTIFACT_DIR="${artifact_host_dir}"
          log_path_local="${artifact_host_dir}/logs/hhfab.log"
          : > "${log_path_local}"

          if command -v hhfab >/dev/null 2>&1; then
            if hhfab_out=$(hhfab version 2>&1 || true); then
              printf '%s\n' "${hhfab_out}" | sanitize_logs | tee -a "${log_path_local}"
              hhfab_version="$(printf '%s\n' "${hhfab_out}" | head -n1 | tr -d '\r')"
            fi
          else
            printf "WARN: 'hhfab' not found on PATH; running script without explicit version output.\n" | sanitize_logs | tee -a "${log_path_local}"
          fi

          run_local() {
            if command -v timeout >/dev/null 2>&1; then
              if [[ ${TIMEOUT_HAS_PRESERVE} -eq 1 ]]; then
                timeout --preserve-status -s TERM "${_TIMEOUT}" bash "${script_path}"
              else
                timeout -s TERM "${_TIMEOUT}" bash "${script_path}"
              fi
            else
              bash "${script_path}"
            fi
          }

          if ! run_local 2>&1 | sanitize_logs | tee -a "${log_path_local}"; then
            exit_code=$?
            status="fail"
          fi
        fi

        rsync_args=(
          -a
          --prune-empty-dirs
          --include
          'hhfab-summary.json'
          --include
          'logs/***'
          --include
          'diagnostics/***'
          --exclude
          '*'
        )
        if command -v rsync >/dev/null 2>&1 && [[ -d "${artifact_host_dir}" ]]; then
          rsync "${rsync_args[@]}" "${artifact_host_dir}/" "${workspace_artifacts_dir}/" || true
        elif [[ -d "${artifact_host_dir}/logs" ]]; then
          cp -R "${artifact_host_dir}/logs" "${workspace_artifacts_dir}/" || true
        fi

        log_path="${workspace_artifacts_dir}/logs/hhfab.log"
        if [[ -f "${log_path}" ]]; then
          if [[ "${hhfab_version}" == "unknown" ]]; then
            if version_line=$(grep -m1 -E '^hhfab version' "${log_path}" 2>/dev/null); then
              hhfab_version="$(printf '%s\n' "${version_line}" | tr -d '\r')"
            fi
          fi
          if command -v rg >/dev/null 2>&1; then
            warnings_count=$(rg --no-heading --fixed-strings -c 'warning:' "${log_path}" 2>/dev/null || echo 0)
          else
            warnings_count=$(grep -F -c 'warning:' "${log_path}" 2>/dev/null || echo 0)
          fi
        fi

        end_ns=$(date +%s%N)
        duration_ms=$(( (end_ns - start_ns) / 1000000 ))

        if [[ ${exit_code} -ne 0 ]]; then
          if [[ ${exit_code} -eq 124 ]]; then
            status="timeout"
          elif [[ "${status}" != "digest_mismatch" ]]; then
            status="fail"
          fi
        fi

        if [[ "${status}" == "ok" ]]; then
          if [[ ${warnings_count} -gt 0 ]]; then
            if [[ "${_STRICT}" == "true" ]]; then
              status="fail"
              if [[ ${exit_code} -eq 0 ]]; then
                exit_code=3
              fi
            else
              status="warn"
            fi
          fi
        fi

        strict_flag="false"
        if [[ "${_STRICT}" == "true" ]]; then
          strict_flag="true"
        fi

        if [[ ! "${warnings_count}" =~ ^[0-9]+$ ]]; then
          warnings_count=0
        fi

        summary_file="${workspace_artifacts_dir}/hhfab-summary.json"
        jq -n \
          --arg status "${status}" \
          --arg version "${hhfab_version}" \
          --arg digest "${image_digest}" \
          --arg strict "${strict_flag}" \
          --arg image "${container_image_used}" \
          --argjson duration ${duration_ms} \
          --argjson warnings ${warnings_count} \
          '{status: $status, durationMs: $duration, hhfabVersion: $version, imageDigest: $digest, warnings: $warnings, strict: ($strict == "true"), containerImage: $image, image: $image}' \
          > "${summary_file}"

        echo "status=${status}" >> "$GITHUB_OUTPUT"
        echo "durationMs=${duration_ms}" >> "$GITHUB_OUTPUT"
        echo "hhfabVersion=${hhfab_version}" >> "$GITHUB_OUTPUT"
        echo "containerImage=${container_image_used}" >> "$GITHUB_OUTPUT"
        if [[ -n "${image_digest}" ]]; then
          echo "imageDigest=${image_digest}" >> "$GITHUB_OUTPUT"
        fi
        echo "warningsCount=${warnings_count}" >> "$GITHUB_OUTPUT"
        echo "strict=${strict_flag}" >> "$GITHUB_OUTPUT"

        if [[ "${status}" == "fail" || "${status}" == "timeout" || "${status}" == "digest_mismatch" ]]; then
          if [[ ${exit_code} -eq 0 ]]; then
            exit_code=1
          fi
          if [[ -n "${status_reason}" ]]; then
            echo "${status_reason}" >&2
          fi
          exit ${exit_code}
        fi
