name: hhfab validate
description: Run hhfab validation via a pinned container or local toolchain.
author: HOSS Automation
inputs:
  script:
    description: Relative path to the validation script to execute.
    required: false
    default: scripts/hhfab-smoke.sh
  working-directory:
    description: Working directory to mount/execute.
    required: false
    default: .
  use-container:
    description: Set to true to run the script inside the pinned hhfab container.
    required: false
    default: 'false'
  container-image:
    description: Fully qualified hhfab container reference.
    required: false
    default: ghcr.io/your-org/hhfab@sha256:1111111111111111111111111111111111111111111111111111111111111111
  no-network:
    description: Disable container network access when true
    required: false
    default: 'false'
  timeout-seconds:
    description: Hard timeout for the validation run (prevents hung jobs)
    required: false
    default: '900'
  container-user:
    description: UID:GID for docker run to avoid root-owned files (auto uses host id)
    required: false
    default: 'auto'
  strict:
    description: Treat warnings as errors (propagate nonzero on warning)
    required: false
    default: 'false'
outputs:
  status:
    description: "ok|fail|warn"
    value: ${{ steps.hhfab.outputs.status }}
  durationMs:
    description: "Execution time (ms)"
    value: ${{ steps.hhfab.outputs.durationMs }}
  hhfabVersion:
    description: "hhfab version reported during execution"
    value: ${{ steps.hhfab.outputs.hhfabVersion }}
  containerImage:
    description: "Container image reference used (local when empty)"
    value: ${{ steps.hhfab.outputs.containerImage }}
  imageDigest:
    description: "Fully qualified image digest used for containerized runs"
    value: ${{ steps.hhfab.outputs.imageDigest }}
  warningsCount:
    description: "Number of warning diagnostics observed during strict evaluation"
    value: ${{ steps.hhfab.outputs.warningsCount }}
runs:
  using: composite
  steps:
    - id: hhfab
      name: Run hhfab validation
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        _TIMEOUT: ${{ inputs.timeout-seconds }}
        _STRICT: ${{ inputs.strict }}
        _CONTAINER_USER: ${{ inputs.container-user }}
      run: |
        set -Eeuo pipefail

        start_ns=$(date +%s%N)
        script="${{ inputs.script }}"

        # sanitize & constrain paths
        root="$(realpath -m "${GITHUB_WORKSPACE}")"
        wd="$(realpath -m ".")"
        if [[ "${wd}" != "${root}"* ]]; then
          echo "Working directory escapes GITHUB_WORKSPACE" >&2
          exit 2
        fi

        script_path="$(realpath -m "${script}")"
        if [[ "${script_path}" != "${root}"* ]]; then
          echo "Script path escapes GITHUB_WORKSPACE" >&2
          exit 2
        fi
        if script_rel=$(realpath --relative-to="${wd}" "${script_path}" 2>/dev/null); then
          script_rel="./${script_rel}"
        else
          script_rel="/workspace${script_path#${root}}"
        fi

        if [[ ! -x "${script_path}" ]]; then
          chmod +x "${script_path}"
        fi

        status="ok"
        exit_code=0
        hhfab_version="unknown"
        container_image_used="local"
        image_digest=""
        warnings_count=0
        TIMEOUT_HAS_PRESERVE=0
        if command -v timeout >/dev/null 2>&1; then
          if timeout --help 2>&1 | grep -q -- '--preserve-status'; then
            TIMEOUT_HAS_PRESERVE=1
          fi
        fi
        run_cmd() {
          if command -v timeout >/dev/null 2>&1; then
            if [[ ${TIMEOUT_HAS_PRESERVE} -eq 1 ]]; then
              timeout --preserve-status -s TERM "${_TIMEOUT}" "$@"
            else
              timeout -s TERM "${_TIMEOUT}" "$@"
            fi
          else
            "$@"
          fi
        }

        if [[ "${{ inputs.use-container }}" == "true" ]]; then
          image="${{ inputs.container-image }}"
          if [[ "${image}" != *"@sha256:"* ]]; then
            echo "hhfab container image must be pinned by digest (include @sha256)" >&2
            exit 1
          fi
          if ! command -v docker >/dev/null 2>&1; then
            echo "docker is required to run the hhfab container" >&2
            exit 1
          fi

          if [[ "${_CONTAINER_USER}" == "auto" ]]; then
            uid="$(id -u)"; gid="$(id -g)"
            user_arg="--user ${uid}:${gid}"
          else
            user_arg="--user ${_CONTAINER_USER}"
          fi

          if [[ "${{ inputs.no-network }}" == "true" ]]; then
            net_arg="--network=none"
          else
            net_arg=""
          fi

          container_image_used="${image}"
          if ! docker image inspect "${image}" >/dev/null 2>&1; then
            docker pull "${image}" >/dev/null
          fi
          pulled_digest="$(docker image inspect --format='{{index .RepoDigests 0}}' "${image}" 2>/dev/null || true)"
          if [[ -z "${pulled_digest}" ]]; then
            echo "Unable to resolve digest for ${image}" >&2
            exit 1
          fi
          if [[ "${pulled_digest}" != "${image}" ]]; then
            echo "Digest mismatch: expected ${image}, got ${pulled_digest}" >&2
            exit 1
          fi
          image_digest="${pulled_digest}"

          docker_base_args=(
            docker
            run
            --rm
            --read-only
            --tmpfs
            /tmp:rw,noexec,nosuid,size=64m
            --cap-drop=ALL
            --security-opt=no-new-privileges
            --pids-limit=256
            --memory=512m
            --cpus=1
            -v
            "${wd}:/workspace:rw"
            -w
            /workspace
            ${user_arg}
          )
          if [[ -n "${net_arg}" ]]; then
            docker_base_args+=(${net_arg})
          fi

          if hhfab_output=$(run_cmd "${docker_base_args[@]}" "${image}" bash -lc 'hhfab version' 2>/dev/null); then
            hhfab_version="$(printf '%s\n' "${hhfab_output}" | head -n1 | tr -d '\r')"
          fi

          docker_run_cmd=(
            "${docker_base_args[@]}"
            --env HHFAB_SCRIPT="${script_rel}"
            "${image}"
            bash -lc 'set -Eeuo pipefail; hhfab version || true; bash "\$HHFAB_SCRIPT"'
          )

          if ! run_cmd "${docker_run_cmd[@]}"; then
            status="fail"
            exit_code=$?
          fi
        else
          if command -v hhfab >/dev/null 2>&1; then
            if hhfab_output=$(hhfab version 2>/dev/null); then
              hhfab_version="$(printf '%s\n' "${hhfab_output}" | head -n1 | tr -d '\r')"
            fi
          else
            echo "WARN: 'hhfab' not found on PATH; running script without explicit version output." >&2
          fi
          if ! run_cmd bash "${script_path}"; then
            status="fail"
            exit_code=$?
          fi
        fi

        if [[ "${_STRICT}" == "true" ]]; then
          if command -v rg >/dev/null 2>&1; then
            warnings_count=$(rg --no-heading --hidden --fixed-strings -c 'warning:' review-kit.log 2>/dev/null || echo 0)
          elif [[ -f review-kit.log ]] && command -v grep >/dev/null 2>&1; then
            warnings_count=$(grep -F -c 'warning:' review-kit.log 2>/dev/null || echo 0)
          fi
          if [[ ${warnings_count} -gt 0 ]]; then
            echo "Strict mode: warnings detected (${warnings_count})" >&2
            status="warn"
          fi
        fi

        end_ns=$(date +%s%N)
        duration_ms=$(( (end_ns - start_ns) / 1000000 ))

        if [[ "${status}" == "warn" && "${_STRICT}" == "true" ]]; then
          echo "Warnings treated as errors" >&2
          status="fail"
          exit_code=3
        fi

        echo "status=${status}" >> "$GITHUB_OUTPUT"
        echo "durationMs=${duration_ms}" >> "$GITHUB_OUTPUT"
        echo "hhfabVersion=${hhfab_version}" >> "$GITHUB_OUTPUT"
        echo "containerImage=${container_image_used}" >> "$GITHUB_OUTPUT"
        if [[ -n "${image_digest}" ]]; then
          echo "imageDigest=${image_digest}" >> "$GITHUB_OUTPUT"
        fi
        echo "warningsCount=${warnings_count}" >> "$GITHUB_OUTPUT"

        if [[ "${status}" == "fail" ]]; then
          if [[ ${exit_code} -eq 0 ]]; then
            exit 1
          fi
          exit ${exit_code}
        fi
