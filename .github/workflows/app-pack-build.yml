name: app-pack-build
run-name: "app-pack-build @ ${{ github.sha }}"

on:
  pull_request:
    paths:
      - 'app-pack/**'
      - 'hossctl/**'
      - '.github/workflows/app-pack-build.yml'
      - 'Makefile'
  push:
    branches:
      - main
    paths:
      - 'app-pack/**'
      - 'hossctl/**'
  workflow_dispatch:

permissions:
  contents: read
  packages: read
  id-token: write  # Required for cosign signing

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  APP_PACK_VERSION: "0.1.0"

jobs:
  validate-structure:
    name: Validate App Pack Structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2

      - name: Validate app-pack structure
        run: make app-pack-test

      - name: Validate contract JSON schemas
        run: |
          set -euo pipefail
          echo "Validating JSON Schema contracts..."

          # Check that schemas are valid JSON
          for schema in app-pack/contracts/hoss/*.json; do
            echo "Validating $schema"
            jq empty "$schema" || { echo "Invalid JSON: $schema"; exit 1; }
          done

          echo "‚úÖ All contracts are valid JSON"

      - name: Check digest pins
        run: |
          set -euo pipefail
          echo "Checking for digest-pinned images..."

          # Extract imageDigest from app-pack.yaml
          DIGEST=$(yq eval '.capsules[0].imageDigest' app-pack/app-pack.yaml)

          if [[ ! "$DIGEST" =~ ^ghcr\.io/.+@sha256:[0-9a-f]{64}$ ]]; then
            echo "‚ùå Invalid digest format: $DIGEST"
            exit 1
          fi

          echo "‚úÖ Image is digest-pinned: $DIGEST"

  build-hossctl:
    name: Build hossctl CLI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed  # v5.1.0
        with:
          go-version: '1.21'

      - name: Build hossctl
        run: make hossctl-build

      - name: Test hossctl
        run: |
          cd hossctl
          go test -v ./...

      - name: Cross-compile hossctl
        run: make hossctl-cross

      - name: Upload hossctl binaries
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882  # v4.4.3
        with:
          name: hossctl-binaries
          path: .artifacts/hossctl/*
          retention-days: 30

  build-and-sign:
    name: Build and Sign App Pack
    runs-on: ubuntu-latest
    needs: [validate-structure, build-hossctl]
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2

      - name: Install cosign
        uses: sigstore/cosign-installer@053f9b74638557590800a301da1ba82351507e2c  # v3.8.1

      - name: Build App Pack
        run: |
          make app-pack-build
          ls -la .artifacts/

      - name: Sign App Pack with cosign
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          set -euo pipefail
          echo "Signing HOSS App Pack with cosign..."

          ls -la .artifacts/

          cosign sign-blob --yes .artifacts/hoss-app-pack-v${APP_PACK_VERSION}.tar.gz \
            --bundle .artifacts/hoss-app-pack-v${APP_PACK_VERSION}.tar.gz.bundle

          ls -la .artifacts/
          echo "‚úÖ Signed App Pack"

      - name: Upload App Pack
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882  # v4.4.3
        with:
          name: hoss-app-pack
          path: |
            .artifacts/hoss-app-pack-v*.tar.gz
            .artifacts/hoss-app-pack-v*.tar.gz.bundle
          retention-days: 90

  integration-test:
    name: Integration Test (Stub)
    runs-on: ubuntu-latest
    needs: build-and-sign
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2

      - name: Download App Pack
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e  # v4.2.1
        with:
          name: hoss-app-pack
          path: .artifacts/

      - name: Integration test placeholder
        run: |
          set -euo pipefail
          echo "üöß Integration testing against Demon platform"
          echo "   Waiting for Demon team issue #237 to complete"
          echo ""
          echo "Planned test steps:"
          echo "  1. Install: demonctl app install .artifacts/hoss-app-pack-v${APP_PACK_VERSION}.tar.gz"
          echo "  2. Verify: demonctl app list | grep hoss"
          echo "  3. Run: hossctl validate samples/topology-min.yaml"
          echo "  4. Assert: Check envelope status=ok, warnings=0, failures=0"
          echo "  5. Uninstall: demonctl app uninstall hoss"
          echo ""
          echo "‚úÖ Structure validated - ready for Demon integration"

      - name: Verify App Pack signature
        run: |
          set -euo pipefail
          echo "Verifying App Pack signature..."

          if ! command -v cosign &> /dev/null; then
            echo "Installing cosign..."
            curl -LO https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64
            chmod +x cosign-linux-amd64
            sudo mv cosign-linux-amd64 /usr/local/bin/cosign
          fi

          # Verify signature bundle
          test -f .artifacts/hoss-app-pack-v${APP_PACK_VERSION}.tar.gz.bundle

          cosign verify-blob .artifacts/hoss-app-pack-v${APP_PACK_VERSION}.tar.gz \
            --bundle .artifacts/hoss-app-pack-v${APP_PACK_VERSION}.tar.gz.bundle \
            --certificate-identity-regexp="^https://github.com/afewell-hh/.+@" \
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com

          echo "‚úÖ Signature verified"

  compatibility-matrix:
    name: Compatibility Check
    runs-on: ubuntu-latest
    needs: validate-structure
    strategy:
      matrix:
        demon-version: ['1.0', '1.1']  # Placeholder versions
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2

      - name: Check compatibility declaration
        run: |
          set -euo pipefail
          echo "Checking compatibility with Demon platform v${{ matrix.demon-version }}"

          # Extract compatibility ranges from app-pack.yaml
          SCHEMA_COMPAT=$(yq eval '.compatibility.appPackSchema' app-pack/app-pack.yaml)
          API_COMPAT=$(yq eval '.compatibility.platformAPI' app-pack/app-pack.yaml)

          echo "App Pack Schema: $SCHEMA_COMPAT"
          echo "Platform API: $API_COMPAT"

          # TODO: Add actual version range checking logic
          # For now, just validate that compatibility fields exist

          if [[ -z "$SCHEMA_COMPAT" || -z "$API_COMPAT" ]]; then
            echo "‚ùå Missing compatibility declarations"
            exit 1
          fi

          echo "‚úÖ Compatibility declarations present"

  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [validate-structure, build-hossctl, build-and-sign, integration-test, compatibility-matrix]
    if: always()
    steps:
      - name: Check results
        run: |
          set -euo pipefail
          echo "App Pack Build Summary"
          echo "======================"
          echo ""
          echo "‚úÖ Structure validation: ${{ needs.validate-structure.result }}"
          echo "‚úÖ hossctl build: ${{ needs.build-hossctl.result }}"
          echo "‚úÖ App Pack build+sign: ${{ needs.build-and-sign.result }}"
          echo "üöß Integration test: ${{ needs.integration-test.result }} (stub)"
          echo "‚úÖ Compatibility check: ${{ needs.compatibility-matrix.result }}"
          echo ""

          if [[ "${{ needs.validate-structure.result }}" != "success" ]] || \
             [[ "${{ needs.build-hossctl.result }}" != "success" ]] || \
             [[ "${{ needs.build-and-sign.result }}" != "success" ]]; then
            echo "‚ùå App Pack build failed"
            exit 1
          fi

          echo "‚úÖ App Pack build succeeded"
