name: review-kit
on:
  pull_request:
    paths:
      - '**/*.ts'
      - '**/*.tsx'
      - 'samples/**'
      - 'scripts/hhfab-smoke.sh'
      - 'REVIEW_KIT_PR13.md'
  schedule:
    - cron: '17 3 * * *'
  workflow_dispatch: {}
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true
jobs:
  guard-workflow-pins:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: workflow guard: pinned actions
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608
      - name: Ensure workflow actions are pinned
        run: |
          set -Eeuo pipefail
          violations=$(rg -n "^\s*uses:\s*[^@]+@" .github | rg -v '@[0-9a-f]{40}' || true)
          if [[ -n "$violations" ]]; then
            echo 'Found unpinned GitHub Actions references:' >&2
            echo "$violations" >&2
            exit 1
          fi

          docker_pattern='docker://'
          docker_pattern+='[A-Za-z0-9_.\-/]+('
          docker_pattern+=':[A-Za-z0-9_.\-/]+'
          docker_pattern+=')?(?!@sha256:)'
          docker_refs=$(rg --pcre2 -n "$docker_pattern" .github -g '!**/*.md' || true)
          if [[ -n "$docker_refs" ]]; then
            echo 'Found docker:// references without pinned digests:' >&2
            echo "$docker_refs" >&2
            exit 1
          fi

          image_pattern='^\s*image:\s+'
          image_pattern+='[-A-Za-z0-9_./]+'
          image_pattern+='(:[-A-Za-z0-9_./]+)?(?!@sha256:)'
          image_refs=$(rg --pcre2 -n "$image_pattern" .github -g '!**/*.md' || true)
          if [[ -n "$image_refs" ]]; then
            echo 'Found container image references without pinned digests:' >&2
            echo "$image_refs" >&2
            exit 1
          fi

  determine-strict:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      require-strict: ${{ steps.evaluate.outputs.require_strict }}
    steps:
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
        id: cf
        with:
          filters: |
            hhfab:
              - 'contracts/**'
              - 'samples/**'
      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        id: evaluate
        env:
          PATHS_MATCH: ${{ steps.cf.outputs.hhfab }}
        with:
          script: |
            const labels = (context.payload.pull_request?.labels || []).map(label => label.name);
            const requireStrict = labels.includes('enforce-hhfab') || process.env.PATHS_MATCH === 'true';
            core.setOutput('require_strict', requireStrict ? 'true' : 'false');

  review-kit:
    if: github.event_name == 'pull_request'
    needs:
      - guard-workflow-pins
      - determine-strict
    runs-on: ubuntu-latest
    name: review-kit (best-effort)
    permissions:
      contents: read
    env:
      STRICT_REQUIRED: ${{ needs.determine-strict.outputs.require-strict }}
    outputs:
      status: ${{ steps.hhfab-smoke.outputs.status }}
      duration-ms: ${{ steps.hhfab-smoke.outputs.durationMs }}
      hhfab-version: ${{ steps.hhfab-smoke.outputs.hhfabVersion }}
      container-image: ${{ steps.hhfab-smoke.outputs.containerImage }}
      image-digest: ${{ steps.hhfab-smoke.outputs.imageDigest }}
      warnings-count: ${{ steps.hhfab-smoke.outputs.warningsCount }}
    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608

      - name: Register hhfab problem matcher
        run: echo '::add-matcher::.github/hhfab-problem-matcher.json'

      - name: Ensure PR checklist confirmed (with override)
        if: github.event_name == 'pull_request' && !contains(github.event.pull_request.labels.*.name, 'maintainer-override')
        run: |
          body="$(jq -r '.pull_request.body' "$GITHUB_EVENT_PATH")"
          if ! echo "$body" | grep -q '\- \[x\] I ran `make review-kit`'; then
            echo 'Checklist not confirmed.'
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
        with:
          node-version: '20'
          cache: 'npm'

      - name: Show tool versions
        run: |
          node -v
          npm -v
          hhfab version || true

      - run: npm ci

      - name: Lint / Type / Tests
        run: |
          npm run lint -- --max-warnings=0
          npm run typecheck || npx tsc -p tsconfig.json --noEmit
          npm run test:core || npm test

      - name: hhfab smoke (best-effort)
        id: hhfab-smoke
        uses: ./.github/actions/hhfab-validate

      - name: Persist hhfab summary
        if: always()
        env:
          STATUS: ${{ steps.hhfab-smoke.outputs.status }}
          DURATION: ${{ steps.hhfab-smoke.outputs.durationMs }}
          VERSION: ${{ steps.hhfab-smoke.outputs.hhfabVersion }}
          IMAGE: ${{ steps.hhfab-smoke.outputs.containerImage }}
          DIGEST: ${{ steps.hhfab-smoke.outputs.imageDigest }}
          WARNINGS: ${{ steps.hhfab-smoke.outputs.warningsCount }}
        run: |
          set -Eeuo pipefail
          status="${STATUS:-}"
          duration="${DURATION:-}"
          version="${VERSION:-}"
          image="${IMAGE:-}"
          digest="${DIGEST:-}"
          warnings="${WARNINGS:-}"
          if [[ -z "$status" ]]; then
            status='n/a'
          fi
          if [[ -z "$version" ]]; then
            version='unknown'
          fi
          if [[ -z "$image" ]]; then
            image='local'
          fi
          if [[ -z "$digest" ]]; then
            digest=''
          fi
          if [[ -z "$warnings" ]]; then
            warnings='0'
          fi
          duration_json="null"
          if [[ "$duration" =~ ^[0-9]+$ ]]; then
            duration_json="$duration"
          fi
          jq -n \
            --arg status "$status" \
            --arg version "$version" \
            --arg image "$image" \
            --arg digest "$digest" \
            --arg warnings "$warnings" \
            --argjson duration "$duration_json" \
            '{status:$status, durationMs:$duration, hhfabVersion:$version, image:$image, imageDigest:$digest, warnings:(try ($warnings|tonumber) catch 0)}' \
            > hhfab-summary.json

      - name: Upload hhfab summary
        if: always()
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8
        with:
          name: review-kit-summary-${{ github.run_id }}
          path: hhfab-summary.json
          retention-days: 3

      - name: Archive review-kit logs
        if: always()
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8
        with:
          name: review-kit-${{ github.run_id }}
          path: |
            **/*.hhfab.log
            **/review-kit/**/report/**/*
          retention-days: 3
          compression-level: 6
          if-no-files-found: ignore

      - name: Write run summary
        if: always()
        env:
          STATUS: ${{ steps.hhfab-smoke.outputs.status }}
          DURATION: ${{ steps.hhfab-smoke.outputs.durationMs }}
          VERSION: ${{ steps.hhfab-smoke.outputs.hhfabVersion }}
          IMAGE: ${{ steps.hhfab-smoke.outputs.containerImage }}
          DIGEST: ${{ steps.hhfab-smoke.outputs.imageDigest }}
          WARNINGS: ${{ steps.hhfab-smoke.outputs.warningsCount }}
        run: |
          {
            echo '## hhfab review-kit'
            echo "- Strict required: ${STRICT_REQUIRED}"
            status="${STATUS:-}"
            duration="${DURATION:-}"
            version="${VERSION:-}"
            image="${IMAGE:-local}"
            digest="${DIGEST:-}"
            warnings="${WARNINGS:-0}"
            if [[ -z "$status" ]]; then
              status='n/a'
            fi
            if [[ -z "$duration" ]]; then
              duration='n/a'
            fi
            if [[ -z "$version" ]]; then
              version='unknown'
            fi
            if [[ -z "$image" ]]; then
              image='local'
            fi
            if [[ -z "$digest" ]]; then
              digest='(n/a)'
            fi
            echo "- Validation status: ${status}"
            echo "- Duration: ${duration} ms"
            echo "- hhfab version: ${version}"
            echo "- Container image: ${image}"
            echo "- Image digest: ${digest}"
            echo "- Warnings: ${warnings}"
            echo "- Artifacts: review-kit-${GITHUB_RUN_ID}"
          } >> "$GITHUB_STEP_SUMMARY"

  review-kit-strict:
    if: github.event_name == 'pull_request' && needs.determine-strict.outputs.require-strict == 'true'
    needs:
      - guard-workflow-pins
      - determine-strict
    runs-on: ubuntu-latest
    name: review-kit (strict)
    permissions:
      contents: read
    env:
      HHFAB_IMAGE: ghcr.io/your-org/hhfab@sha256:1111111111111111111111111111111111111111111111111111111111111111
    outputs:
      status: ${{ steps.strict-container.outputs.status || steps.strict-local.outputs.status }}
      duration-ms: ${{ steps.strict-container.outputs.durationMs || steps.strict-local.outputs.durationMs }}
      hhfab-version: ${{ steps.strict-container.outputs.hhfabVersion || steps.strict-local.outputs.hhfabVersion }}
      container-image: ${{ steps.strict-container.outputs.containerImage || steps.strict-local.outputs.containerImage }}
      image-digest: ${{ steps.strict-container.outputs.imageDigest || steps.strict-local.outputs.imageDigest }}
      warnings-count: ${{ steps.strict-container.outputs.warningsCount || steps.strict-local.outputs.warningsCount }}
    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608

      - name: Register hhfab problem matcher
        run: echo '::add-matcher::.github/hhfab-problem-matcher.json'

      - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
        with:
          node-version: '20'
          cache: 'npm'

      - name: Show tool versions
        run: |
          node -v
          npm -v

      - run: npm ci

      - name: Install cosign
        if: github.event.pull_request.head.repo.fork == false
        uses: sigstore/cosign-installer@1fc5bd9b1c9d6a74d2a4c51e55f66e6f14a4bc71
        with:
          cosign-release: 'v2.4.1'

      - name: Verify hhfab container signature
        if: github.event.pull_request.head.repo.fork == false
        run: |
          set -Eeuo pipefail
          cosign verify \
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com \
            --certificate-identity-regexp='^https://github.com/your-org/.*$' \
            "${HHFAB_IMAGE}"

      - name: Verify hhfab provenance attestation
        if: github.event.pull_request.head.repo.fork == false && vars.ENABLE_PROVENANCE_VERIFY == 'true'
        run: |
          set -Eeuo pipefail
          cosign verify-attestation --type slsaprovenance "${HHFAB_IMAGE}"

      - name: Strict hhfab smoke (containerized)
        if: github.event.pull_request.head.repo.fork == false
        id: strict-container
        uses: ./.github/actions/hhfab-validate
        with:
          use-container: 'true'
          strict: 'true'
          no-network: 'true'
          container-user: auto
          container-image: ${{ env.HHFAB_IMAGE }}

      - name: Strict hhfab smoke (fork fallback)
        if: github.event.pull_request.head.repo.fork == true
        id: strict-local
        uses: ./.github/actions/hhfab-validate
        with:
          strict: true

      - name: Persist hhfab summary (strict)
        if: always()
        env:
          STATUS: ${{ steps.strict-container.outputs.status || steps.strict-local.outputs.status }}
          DURATION: ${{ steps.strict-container.outputs.durationMs || steps.strict-local.outputs.durationMs }}
          VERSION: ${{ steps.strict-container.outputs.hhfabVersion || steps.strict-local.outputs.hhfabVersion }}
          IMAGE: ${{ steps.strict-container.outputs.containerImage || steps.strict-local.outputs.containerImage }}
          DIGEST: ${{ steps.strict-container.outputs.imageDigest || steps.strict-local.outputs.imageDigest }}
          WARNINGS: ${{ steps.strict-container.outputs.warningsCount || steps.strict-local.outputs.warningsCount }}
        run: |
          set -Eeuo pipefail
          status="${STATUS:-}"
          duration="${DURATION:-}"
          version="${VERSION:-}"
          image="${IMAGE:-}"
          digest="${DIGEST:-}"
          warnings="${WARNINGS:-}"
          if [[ -z "$status" ]]; then
            status='n/a'
          fi
          if [[ -z "$version" ]]; then
            version='unknown'
          fi
          if [[ -z "$image" ]]; then
            image='local'
          fi
          if [[ -z "$digest" ]]; then
            digest=''
          fi
          if [[ -z "$warnings" ]]; then
            warnings='0'
          fi
          duration_json="null"
          if [[ "$duration" =~ ^[0-9]+$ ]]; then
            duration_json="$duration"
          fi
          jq -n \
            --arg status "$status" \
            --arg version "$version" \
            --arg image "$image" \
            --arg digest "$digest" \
            --arg warnings "$warnings" \
            --argjson duration "$duration_json" \
            '{status:$status, durationMs:$duration, hhfabVersion:$version, image:$image, imageDigest:$digest, warnings:(try ($warnings|tonumber) catch 0)}' \
            > hhfab-strict-summary.json

      - name: Upload hhfab summary (strict)
        if: always()
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8
        with:
          name: review-kit-strict-summary-${{ github.run_id }}
          path: hhfab-strict-summary.json
          retention-days: 3

      - name: Archive review-kit logs (strict)
        if: always()
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8
        with:
          name: review-kit-strict-${{ github.run_id }}
          path: |
            **/*.hhfab.log
            **/review-kit/**/report/**/*
          retention-days: 3
          compression-level: 6
          if-no-files-found: ignore

      - name: Write run summary
        if: always()
        env:
          STATUS: ${{ steps.strict-container.outputs.status || steps.strict-local.outputs.status }}
          DURATION: ${{ steps.strict-container.outputs.durationMs || steps.strict-local.outputs.durationMs }}
          VERSION: ${{ steps.strict-container.outputs.hhfabVersion || steps.strict-local.outputs.hhfabVersion }}
          IMAGE: ${{ steps.strict-container.outputs.containerImage || steps.strict-local.outputs.containerImage }}
          DIGEST: ${{ steps.strict-container.outputs.imageDigest || steps.strict-local.outputs.imageDigest }}
          WARNINGS: ${{ steps.strict-container.outputs.warningsCount || steps.strict-local.outputs.warningsCount }}
        run: |
          {
            echo '## hhfab review-kit (strict)'
            echo '- Mode: enforce-hhfab'
            status="${STATUS:-}"
            duration="${DURATION:-}"
            version="${VERSION:-}"
            image="${IMAGE:-local}"
            digest="${DIGEST:-}"
            warnings="${WARNINGS:-0}"
            if [[ -z "$status" ]]; then
              status='n/a'
            fi
            if [[ -z "$duration" ]]; then
              duration='n/a'
            fi
            if [[ -z "$version" ]]; then
              version='unknown'
            fi
            if [[ -z "$image" ]]; then
              image='local'
            fi
            if [[ -z "$digest" ]]; then
              digest='(n/a)'
            fi
            echo "- Validation status: ${status}"
            echo "- Duration: ${duration} ms"
            echo "- hhfab version: ${version}"
            echo "- Container image: ${image}"
            echo "- Image digest: ${digest}"
            echo "- Warnings: ${warnings}"
            echo '_No-network: enabled · Non-root: auto_'
            echo "- Artifacts: review-kit-strict-${GITHUB_RUN_ID}"
          } >> "$GITHUB_STEP_SUMMARY"

  review-kit-comment:
    if: ${{ always() && github.event_name == 'pull_request' }}
    needs:
      - determine-strict
      - review-kit
      - review-kit-strict
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Upsert sticky comment
        if: always()
        uses: marocchino/sticky-pull-request-comment@773744901bac0e8cbb5a0dc842800d45e9b2b405
        with:
          header: review-kit
          message: |
            **hhfab review-kit summary**
            - 🧪 Best-effort: `${{ needs.review-kit.result }}` (status: `${{ needs.review-kit.outputs.status || 'n/a' }}`, duration: `${{ needs.review-kit.outputs['duration-ms'] || 'n/a' }} ms`, warnings: `${{ needs.review-kit.outputs['warnings-count'] || '0' }}`)
            - 🔒 Strict: `${{ needs.review-kit-strict.result }}` (status: `${{ needs.review-kit-strict.outputs.status || 'n/a' }}`, duration: `${{ needs.review-kit-strict.outputs['duration-ms'] || 'n/a' }} ms`, warnings: `${{ needs.review-kit-strict.outputs['warnings-count'] || '0' }}`)
            - 🧾 hhfab version: `${{ needs.review-kit.outputs['hhfab-version'] || 'n/a' }}` (strict: `${{ needs.review-kit-strict.outputs['hhfab-version'] || 'n/a' }}`)
            - 🐳 Container image: `${{ needs.review-kit-strict.outputs['container-image'] || needs.review-kit.outputs['container-image'] || 'n/a' }}`
            - 🧬 Image digest: `${{ needs.review-kit-strict.outputs['image-digest'] || needs.review-kit.outputs['image-digest'] || 'n/a' }}`
            - ✅ Strict required: `${{ needs.determine-strict.outputs.require-strict }}`
            - 📦 Artifacts: `review-kit-${{ github.run_id }}` (strict artifact if run: `review-kit-strict-${{ github.run_id }}`)
            - 🔗 Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  nightly-hhfab:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    continue-on-error: true
    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608
      - name: Register hhfab problem matcher
        run: echo '::add-matcher::.github/hhfab-problem-matcher.json'
      - name: Run nightly review-kit smoke
        run: make review-kit
