name: review-kit
on:
  pull_request:
    paths:
      - 'scripts/**'
      - '.github/actions/**'
      - '.github/workflows/review-kit.yml'
      - 'contracts/**'
      - 'samples/**'
  schedule:
    - cron: '17 3 * * *'
  workflow_dispatch: {}
permissions:
  contents: read
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  HHFAB_IMAGE_DIGEST: ${{ vars.HHFAB_IMAGE_DIGEST }}
  MATRIX_FILE: .github/review-kit/matrix.txt
  ARTIFACT_DIR: .artifacts/review-kit

jobs:
  smoke-local:
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      matrix: ${{ steps.read-matrix.outputs.matrix }}
      strict-needed: ${{ steps['strict-needed'].outputs.strict_needed }}
      strict-files: ${{ steps['strict-changes'].outputs.strict_files }}
    env:
      HHFAB_MATCHER_PATH: .github/hhfab-problem-matcher.json
    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608
      - id: read-matrix
        run: |
          set -Eeuo pipefail
          if [[ ! -f "${MATRIX_FILE}" ]]; then
            echo "Matrix file missing (${MATRIX_FILE})" >&2
            exit 1
          fi
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          sed -e '/^[[:space:]]*#/d' -e '/^[[:space:]]*$/d' "${MATRIX_FILE}" >> "$GITHUB_OUTPUT"
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Detect strict-impacting changes
        if: github.event_name == 'pull_request'
        id: strict-changes
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
        with:
          list-files: shell
          filters: |
            strict:
              - added|modified|deleted:
                  - 'samples/**'
                  - 'contracts/**'
                  - '.github/review-kit/**'
                  - 'scripts/hhfab-*.sh'
      - name: Determine strict requirement
        id: strict-needed
        env:
          EVENT_NAME: ${{ github.event_name }}
          STRICT_CHANGED: ${{ steps['strict-changes'].outputs.strict }}
        run: |
          set -Eeuo pipefail
          if [[ "${EVENT_NAME}" != "pull_request" ]]; then
            echo "strict_needed=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if [[ "${STRICT_CHANGED}" == "true" ]]; then
            echo "strict_needed=true" >> "$GITHUB_OUTPUT"
          else
            echo "strict_needed=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Summarize strict-triggering changes
        if: steps['strict-changes'].outputs.strict == 'true'
        shell: bash
        run: |
          set -Eeuo pipefail
          files="${{ steps['strict-changes'].outputs.strict_files }}"
          if [[ -z "${files}" ]]; then
            files="(paths-filter reported strict=true but no files were listed)"
          fi
          {
            echo '### Changed files (sensitive)'
            echo ''
            printf '```\n%s\n```\n' "${files}"
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Register hhfab matcher
        run: echo "::add-matcher::${HHFAB_MATCHER_PATH}"
      - name: Bootstrap tools (best-effort)
        run: bash scripts/tool-bootstrap.sh
      - name: Run local hhfab validator
        id: run
        uses: ./.github/actions/hhfab-validate-fixed
        with:
          mode: local
          matrix: ${{ steps.read-matrix.outputs.matrix }}
      - name: Remove hhfab matcher
        if: always()
        run: echo "::remove-matcher owner=hhfab::"
      - name: Print summary
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          p="${{ steps.run.outputs.summary_path }}"
          if [[ -z "$p" || ! -f "$p" ]]; then
            echo "summary missing" >&2
            exit 0
          fi
          jq -c . "$p" | tee -a "$GITHUB_STEP_SUMMARY"
      - name: Append strict target summary
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          p="${{ steps.run.outputs.summary_path }}"
          if [[ -z "$p" || ! -f "$p" ]]; then
            exit 0
          fi
          validated=$(jq -r '.counts.validated // 0' "$p")
          failures=$(jq -r '.counts.failures // 0' "$p")
          warnings=$(jq -r '.counts.warnings // 0' "$p")
          digest=$(jq -r '.image.digest // ""' "$p")
          {
            echo ""
            echo "#### Strict target summary"
            echo ""
            echo "| validated | failures | warnings |"
            echo "| --- | --- | --- |"
            echo "| ${validated} | ${failures} | ${warnings} |"
            if [[ -n "${digest}" ]]; then
              echo ""
              echo "Image digest: ${digest}"
            fi
            mapfile -t targets < <(jq -r '.matrix[]?' "$p" | head -n 5)
            if (( ${#targets[@]} > 0 )); then
              echo ""
              echo "<details><summary>Validated targets (first ${#targets[@]} of ${validated})</summary>"
              echo ""
              for t in "${targets[@]}"; do
                echo "- ${t}"
              done
              echo ""
              echo "</details>"
            fi
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Upload summary artifact
        if: always() && steps.run.outputs.summary_path != ''
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: review-kit-summary.json
          path: ${{ steps.run.outputs.summary_path }}
          if-no-files-found: warn
          retention-days: 1
  review_kit_strict:
    name: review-kit (strict)
    needs: smoke-local
    if: needs['smoke-local'].outputs['strict-needed'] == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608
      - name: Diagnose HHFAB_IMAGE_DIGEST presence
        run: |
          if [ -n "${HHFAB_IMAGE_DIGEST:-}" ]; then
            echo "HHFAB_IMAGE_DIGEST is set (length: ${#HHFAB_IMAGE_DIGEST})"
          else
            echo "HHFAB_IMAGE_DIGEST is MISSING"; exit 2
          fi
      - name: Register hhfab matcher
        run: echo "::add-matcher::${HHFAB_MATCHER_PATH}"
      - name: Run strict hhfab validator
        id: run
        uses: ./.github/actions/hhfab-validate-fixed
        with:
          mode: strict
          matrix: ${{ needs['smoke-local'].outputs.matrix }}
          use-container: 'true'
          container-image: ${{ env.HHFAB_IMAGE_DIGEST }}
      - name: Ensure strict validated targets
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          p="${{ steps.run.outputs.summary_path }}"
          if [[ -z "$p" || ! -f "$p" ]]; then
            echo "::error::strict summary missing" >&2
            exit 1
          fi
          jq -e '.strict == true and (.counts.validated // 0) > 0' "$p" >/dev/null \
            || { echo "::error::strict run had empty matrix or produced no validations" >&2; exit 1; }
      - name: Enforce hhfab minimum version
        if: always()
        env:
          HHFAB_MIN_SEMVER: "0.4.0"
        run: |
          set -Eeuo pipefail
          p="${{ steps.run.outputs.summary_path }}"
          if [[ -z "$p" || ! -f "$p" ]]; then
            echo "::error::strict summary missing" >&2
            exit 1
          fi
          got=$(jq -r '.hhfab.version // empty' "$p")
          if [[ -z "${got}" ]]; then
            echo "::error::hhfab version missing from summary" >&2
            exit 1
          fi
          printf '%s\n%s\n' "${HHFAB_MIN_SEMVER}" "${got}" | sort -V | tail -n1 | grep -qx "${got}" || {
            echo "::error::hhfab ${got} is below required ${HHFAB_MIN_SEMVER}" >&2
            exit 1
          }
      - name: Enforce warning budget
        if: always()
        env:
          WARN_BUDGET: "0"
        run: |
          set -Eeuo pipefail
          p="${{ steps.run.outputs.summary_path }}"
          if [[ -z "$p" || ! -f "$p" ]]; then
            echo "strict summary missing" >&2
            exit 1
          fi
          warns=$(jq -r '.counts.warnings // 0' "$p")
          echo "warnings=${warns} budget=${WARN_BUDGET}"
          if [[ "$warns" =~ ^[0-9]+$ ]] && [ "$warns" -le "$WARN_BUDGET" ]; then
            exit 0
          fi
          echo "::error::hhfab warnings (${warns}) exceed budget (${WARN_BUDGET})" >&2
          exit 1
      - name: Enforce strict status
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          p="${{ steps.run.outputs.summary_path }}"
          if [[ -z "$p" || ! -f "$p" ]]; then
            echo "strict summary missing" >&2
            exit 1
          fi
          status=$(jq -r '.status // "error"' "$p")
          if [[ "$status" == "ok" ]]; then
            exit 0
          fi
          echo "strict validator status=${status}" >&2
          exit 1
      - name: Remove hhfab matcher
        if: always()
        run: echo "::remove-matcher owner=hhfab::"
      - name: Print summary
        if: always()
        shell: bash
        run: |
          set -Eeuo pipefail
          p="${{ steps.run.outputs.summary_path }}"
          if [[ -z "$p" || ! -f "$p" ]]; then
            echo "summary missing" >&2
            exit 0
          fi
          jq -c . "$p" | tee -a "$GITHUB_STEP_SUMMARY"
      - name: Summarize strict-triggering changes
        if: needs['smoke-local'].outputs['strict-files'] != ''
        shell: bash
        run: |
          set -Eeuo pipefail
          files="${{ needs['smoke-local'].outputs['strict-files'] }}"
          if [[ -z "${files}" ]]; then
            files="(paths-filter reported strict=true but no files were listed)"
          fi
          {
            echo ""
            echo '### Changed files (sensitive)'
            echo ''
            printf '```\n%s\n```\n' "${files}"
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Generate SARIF from summary
        if: always()
        id: sarif
        run: |
          set -Eeuo pipefail
          p="${{ steps.run.outputs.summary_path }}"
          if [[ -z "$p" || ! -f "$p" ]]; then
            echo "::warning::strict summary missing; skipping SARIF generation" >&2
            exit 0
          fi
          out="${ARTIFACT_DIR}/hhfab.sarif"
          mkdir -p "$(dirname "$out")"
          jq -n --argjson s "$(cat "$p")" \
          '{
            "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "hhfab",
                    "version": ($s.tool.version // "unknown")
                  }
                },
                "results": []
              }
            ]
          }' > "$out"
          echo "sarif=$out" >> "$GITHUB_OUTPUT"
      - name: Upload SARIF
        if: always() && steps.sarif.outputs.sarif != ''
        uses: github/codeql-action/upload-sarif@80cb6b56b93de3e779c7d476d9100d06fb87c877
        with:
          sarif_file: ${{ steps.sarif.outputs.sarif }}
          category: hhfab
      - name: Upload summary artifact
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: review-kit-summary.json
          path: ${{ steps.run.outputs.summary_path }}
          if-no-files-found: warn
          retention-days: 1